* Section 1 Intro & Getting Started

** Why Take This Course

*** Learn modern JS from start to finish
*** Learn to build without framworks
*** Get better at building *with* frameworks by understanding vanilla JS
*** Learn DOM without JQuery
*** Learn sructure apps and design patterns

** Some Topics Covered

*** Basics & Fundamentals
*** DOM Manipulation & UI Events (NO jQuery!!!)
*** OOP - ES5 Prototypes + ES6 Classes
*** Async JS -- Ajax, Fetch, Promises, Async/Await
*** Error Handling, Regular Expressions, LocalStorage
*** Programmning Scope, Arrow Functions, Map Set, Iterators
*** JavaScript Patterns
*** Around 10 Projects

** Included Projects

*** Task List (DOM & LocalStorage)
*** Loan calculator
*** Number Guessing game
*** Book Manager (OPP Intro)
*** EasyHTTP library (Fetch API)
*** Github Finder (Github API)
*** Weather App (weatherunderground API)
*** Tracalorie (Module Pattern)
*** CRUD App Wtih ES6 Modules (Webpack)

** Mini Projects

*** Chuck Norris Joke Generator
*** Profile Scroller (iterators)
*** State Pattern Interface

** Other Skills You May Pick Up

*** HTML / CSS
*** Bootstrap 4
*** Materialize CSS
*** Skeleton CSS
*** HTTP / REST APIS
*** Webpack / Babel

** Project Files

*** Every lecture contains the project files for that video
*** Modular learning sections will just be an index.html & app.js file
*** Projects have incremental files

** If you get stuck

*** Search
*** post Q&A
*** include the code
*** email code

** Updates

*** ESNext features

** Code Style

*** Best way to learn
*** Practices get better
*** Everyone programs differently


* Section 2: JavaScript Language Fundamentals

** Section Intro & File Setup
*** js_sandbox folder
**** index.html

#+begin_src html :results output

  <!doctype html>
  <html lang="en">
      <head>
          <meta charset="UTF-8"/>
          <title>JavaScript Sandbox: Section 2</title>
          <link rel="stylesheet" href="styles.css">
          <style>
           body {
               background-color: linen;
           }
          </style>
      </head>
      <body>
        <h1>JavaScript Sandbox: Section 2</h1>
        <script src="app.js"></script>
        <script>
         document.querySelector('h1').style.color = 'blue';
         console.clear();      // Clear console
         console.time('go')
         console.log(document);
         console.log('hello');
         console.log(123);
         console.log('hello');
         var greeting = 'hi';
         console.log(greeting);
         console.log([1,2,3,4]);   // Arrays
         console.log({a:1,b:2});   // Object Literal
         console.table({a:1,b:2}); // Tables
         console.error('This is an error');  // Errors
         console.warn('This is an warning');  // Warnings

         console.timeEnd('go');
        </script>
      </body>
  </html>

#+end_src

**** app.js

#+begin_src js :results output

// alert("hello");
console.log(document);
document.querySelector('h1').style.color = 'red';
var h1 = document.querySelector('h1');
h1.style.color = 'blue';
+begin_src js :results output
	
#+end_src

#+RESULTS:

**** styles.css

#+begin_src css :results output

  h1 {
      color: blue;
      }

#+end_src

** Variables - var, let & const
- var has always been around
- let & const introduced in 2015 - ES6

*** Variable name Rules:
- Can use: letters, numbers, _, $
- Can not start with a number
**** Variable name examples:

#+begin_src js :results output

  // No !!!
  var 1name = 'john';

#+end_src

#+begin_src js :results output

  // JQuery...
  var $name = 'den';
  console.log($name);

  // private variables...
  var _name = 'denny';
  console.log(_name);

#+end_src

#+RESULTS:
: den
: denny

*** Var Example

#+begin_src js :results output

  var name ='John Doe';
  console.log(name);
  name = 'Dennis Mitchell';     //  Reassignment (Dynamic)
  console.log(name);

  // Initializing a variable
  var greeting;
  console.log(greeting);

#+end_src

#+RESULTS:
: John Doe
: Dennis Mitchell
: undefined

*** const

Use const type whenever possble, to make code more secure and readable

#+begin_src js :results output

  // Object
  const Person = {
      name: "Dennis",
      age: 53
      }

  console.log(Person);
  console.log(Person.name);
  console.log(typeof(Person));

  // Arrays
  const numbers = [1,2,3,4,5];
  numbers.push(6);
  
  console.log(numbers);
  console.log(numbers[4]);



#+end_src

#+RESULTS:
: { name: 'Dennis', age: 53 }
: Dennis
: object
: [ 1, 2, 3, 4, 5, 6 ]
: 5

** Data Types in JavaScript 

*** Primitive Data Types:

- Stored directly in the location the variable accesses
- Stored on the stack

- String
- Number - (int and float)
- Boolean
- Null
- Undefined
- Symbols (ES6)

*** Reference Data Types:

- Accessed by refenrence
- Objects that are stored on the heap
- A pointer to a location in memory

- Arrays
- Object Literals
- Functions
- Dates
- Anything Else...

*** Dynamically Typed Language

- Types are associated with values not variables
- Same variable can hold multple types
- Do not need to specify types
- Most other languages are statically typed (java, c#, c++)
- There are supersets of JS and addons to allow static typing (TypeScript, Flow)

**** Reference Examples:

#+begin_src js :results output

  // Array
  const hobbies = ['movies', 'music'];
  console.log(typeof hobbies);

  // Array actual type tip
  if (hobbies.constructor.name == 'Array') {
      console.log('hobbies is an Array');
  }

  // Objects literal
  const address = {
      city: 'Miami',
      state: 'Florida'
  }

  const today = new Date();

  console.log(today);
  console.log(typeof today);

#+end_src

#+RESULTS:
: object
: hobbies is an Array
: 2021-11-20T17:17:38.759Z
: object

** Type Conversion

*** toString, to number:
#+begin_src js :results output

  // toString()
  val = (5).toString();
  val = (true).toString();
  val = String(5);
  console.log(typeof val);

  // to Number
  val = Number('5');
  val = parseInt('100');
  val = parseFloat('100');
  console.log(val.toFixed(2));

#+end_src

#+RESULTS:
: string
: 100.00

** Numbers & The Math Object 

#+begin_src js :results output

  val = Math.floor(Math.random() * 20 + 1);
  console.log(val);
  val = Math.


#+end_src

#+RESULTS:
: 20

** String Methods & Concatenation

** Template Literals 
