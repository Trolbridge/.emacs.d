:PROPERTIES:
:ID:       7FEE3B38-014A-41C6-9B22-85A088A29D70
:END:
#+title: JavaScript Object Constructor vs Literal


[[id:B178F57B-461C-4AF3-A52E-941A3D72571F][JavaScript]]

* Construction vs literal - Passing Parameters

#+begin_src js :results output

    // with a constructor function, we can construct our object with parameters we pass into it
    function websiteUrl(url) {
      this.url = url;
      this.showUrl = function() {
          console.log(this.url); 
          };
      };
  let myWebsite = new websiteUrl('thisismywebsite.com');
  myWebsite.showUrl();

  // with a object literal, you are unalbe to have constrictor, which means you are unable to initalise you object unless you add your own init function

  let website = {
      init: function(url) {
          this.url = url;
      },
      showUrl: function() {
          console.log(this.url);
      }
  };
  
  website.init('test');
  website.showUrl();

#+end_src

#+RESULTS:
: thisismywebsite.com
: test



* Constructor Function

#+begin_src js :results output

  function Person() {
      this.membershipStatus = false;
      this.name = 'Wally';
      this.talk = function() {
          console.log(`The membership status of ${this.name} is ${this.membershipStatus}`)
      };
  };

  let person1 = new Person;
  person1.talk();

  let person2 = new Person;
  person2.name = 'John';
  person2.membershipStatus = true;
  person2.talk();

#+end_src


* Object Literal - Singleton

#+begin_src js :results output

  let person = {
      membershipStatus: false,
      name: 'Wally',
      talk: function() {
          console.log(`The membership ${this.membershipStatus} is ${this.name}`)
      }
  }

  person.talk();

#+end_src
