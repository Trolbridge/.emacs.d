:PROPERTIES:
:ID:       BB097FFA-2269-42DC-8411-E6BAE5CFCF5B
:END:
#+title: JavaScript Object Creation


[[id:B178F57B-461C-4AF3-A52E-941A3D72571F][JavaScript]]


* Create Empty Objects

#+begin_src js :results output

  // THIS IS JUST A TEMPLATE

  // Objects Literal - single object (Singleton)
  let emptyObject = {...};

  // Object Constructor Function - multiple instances
  function Person() {...};
  let person2 = new Person('Wally', 35);

  // Arrays
  let emptyArray = [...];

  // functions
  let emptyFunction = function() {};

#+end_src

#+RESULTS:

* 4 ways to create objects:

** #1 Literals
*** Object literal
- Also known as an object initializer to stay consistent with terminology used in C++
- Easiest - define property values inside curly braces {}
- Use a , to seperate

  
*** Object with properties and methods 

#+begin_src js :results output

    // object with properties and methods
  let Person = {
      firstName: "Clyde",
      age: 35,
      message: function() {
          console.log(`${this.firstName} is ${this.age} years old`);
          }
      };
   
  console.log(Person);
  console.log(Person.message());


#+end_src

#+RESULTS:
: { firstName: 'Clyde', age: 35, message: [Function: message] }
: Clyde is 35 years old
: undefined

** #2 Constructors
[[id:3052FD81-F554-43D8-8F1A-4D940244C4ED][JavaScript Object Constructor Function]] 

** #3 Object.create() method

Creates a new object, using another object as its prototype
Can do this without having to define a constructor function - no new keyword

Object.create( prototype, properties )
                       mandatory  optional

*** Info

#+begin_src js :results output


  let dog = Object.create(null);
  console.log(dog);

  dog.name = "Fluffy";
  console.log(dog);


#+end_src

#+RESULTS:
: [Object: null prototype] {}
: [Object: null prototype] { name: 'Fluffy' }

*** Object.create() method Example #1

#+begin_src js :results output

  // Dog Object Prototype

  dogProt = {
      woof: function() {
          console.log(this.sound)
      }
  };

  let doggy = Object.create(dogProt);
  console.log(doggy);
  console.log(doggy.woof());

  doggy.sound = 'Ruff';
  console.log(doggy.woof());
  doggy.woof();


  // console.log(dog2.woof());

#+end_src

#+RESULTS:
: [Object: null prototype] {}
: [Object: null prototype] { name: 'Fluffy' }
: {}
: undefined
: undefined
: Ruff
: undefined
: Ruff

*** Object.create() method Example #2

#+begin_src js :results output

  // Dog Object Prototype

  dogProt = {
      woof: function() {
          console.log(this.sound)
      }
  };

  // with Optional parameters

  let dog2 = Object.create(dogProt, {
      'sound': {
          value: 'bow wow'
      }

  });

  dog2.woof();
  
#+end_src

*** Object.create() method Example #3

#+begin_src js :results output

  // Dog Object Prototype

  dogProt = {
      woof: function() {
          console.log(this.sound)
      }
  };

  // with Optional parameters

  let dog2 = Object.create(dogProt, {
      'sound': {
          value: 'bow wow'
      }

  });

  dog2.woof();
  
#+end_src

*** Object.create() method Example #4

#+begin_src js :results output

  // object.create()
  //   let person = Object.create();
  // Example 2 Practical employee example

  // create company 1 called Dog Factory
  let dogProto = {
      company: "The Dog Factory"
  };

  // create company 2 called Cat Factory
  let catProto = {
      company: "The Cat Factory"
  };

  // create employees
  let employee1 = Object.create(dogProto);
  employee1.name = 'Dennis';

  let employee2 = Object.create(catProto);
  employee2.name = 'Edith';

  console.log(`${employee1.name} works for ${employee1.company}`)
  console.log(`${employee2.name} works for ${employee2.company}`)
  
#+end_src

#+RESULTS:
: Dennis works for The Dog Factory
: Edith works for The Cat Factory


** #4 ES2015 Classes
Other languages use classes to define objects(java, python)
People were battling to understand JavaScript prototypal inheritance.
JavaScript doesn't have true classes, so in 2015, ECMAScript (ES6) indtroduced classes
Under the hood, JavaScript is still the same - this "class" is just syntactic sugar

